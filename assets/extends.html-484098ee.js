import{_ as n,o as s,c as a,d as p}from"./app-ba9ea368.js";const t={},e=p(`<nav class="table-of-contents"><ul></ul></nav><h1 id="如何在-js-中实现继承-用尽可能多的方式" tabindex="-1"><a class="header-anchor" href="#如何在-js-中实现继承-用尽可能多的方式" aria-hidden="true">#</a> 如何在 JS 中实现继承（用尽可能多的方式）</h1><blockquote><p>create by shaoyi <strong>2024-01-05 10:45</strong></p></blockquote><ul><li><p>如何在 JS 中实现继承（用尽可能多的方式）？请写出具体代码 示例代码：请让Yupi继承Coder</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Coder</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type
<span class="token punctuation">}</span>

<span class="token class-name">Coder</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">rap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;yo yo yo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Yupi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>es6类的继承 extend</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
	<span class="token comment">// 类的构造函数方法</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	 <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name
	 <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 类的一般方法</span>
	<span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//创建类的实例</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
 <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token comment">//子类必须在constructor方法中调用super方法，否则new实例时会报错；因为子类没有自己的this对像</span>
   <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
son<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.借用构造函数继承</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">Yupi</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token function">Coder</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span>
  <span class="token punctuation">}</span>
 <span class="token keyword">let</span> yupi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Yupi</span><span class="token punctuation">(</span><span class="token string">&#39;鱼皮&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;coder&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  yupi<span class="token punctuation">.</span>type <span class="token comment">// &#39;Coder&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.原型链继承</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Yupi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&quot;coder&quot;</span>  
<span class="token punctuation">}</span>
<span class="token class-name">Yupi</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Coder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> newYupi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Yupi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
newYupi<span class="token punctuation">.</span>type  <span class="token comment">// &#39;Coder</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// 原型式继承</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Coder</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;coder&#39;</span>
  <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">function</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>obj
 <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
<span class="token keyword">let</span> coder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Coder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//父类实例</span>
<span class="token keyword">let</span> yupi<span class="token operator">=</span><span class="token function">Son</span><span class="token punctuation">(</span>coder<span class="token punctuation">)</span> <span class="token comment">//所有实例都会继承原型上的属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","extends.html.vue"]]);export{k as default};
